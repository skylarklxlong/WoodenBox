apply plugin: 'com.android.application'

//这里是groovy的代码了，定义了一个获取时间的方法，groovy是兼容java，它可以直接使用jdk里的方法
def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}
//file()是Project.java里的一个方法，这里定义一个File类型的对象，Project后面博客会介绍到
def keyStore = file('skylarkkeystore.jks')

android {
    /**
     * 这个大家应该很熟悉了，有疑问的应该是后面的代码，这里表示获取一些全局变量
     * 这些变量的值在根目录下的build.gradle中定义，具体可以看看这篇博客：
     * http://blog.csdn.net/fwt336/article/details/54613419
     */
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    /**
     * 同理，这里都是通过获取全局设置的变量值来进行相关配置，这样做的好处在于当
     * 你的项目里有多个model时，可以方便修改这些公共的配置，只需要修改一个地方就可以同步了
     */
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
    }

    //这里应该是设置打包后的apk里的META-INF移除指定的文件
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    //关闭指定的lint检查
    lintOptions {
        disable 'MissingTranslation', 'ExtraTranslation'
    }
    //lint检查到错误时不中断编译，好像是说lint检查是为优化代码，发现的错误其实并不会导致程序异常
    //所以有的时候及时发现Lint检查错误还是可以直接运行查看效果
    lintOptions {
        abortOnError false
    }
    //签名的相关配置
    signingConfigs {
        //这个标签名可以随意命名，这里的作用大概类似于定义一个对象，该对象里设置好了签名需要的各种配置
        //可以定义不止一种配置的签名对象，例如常见的还有 debug{...}, release{...}，然后在buildTypes{}里
        //通过 signingConfigs.app1 进行调用
        app1 {
            //签名的相关配置，网上资料很多，STOREPASS, KEYALIAS, KEYPASS 这些常量是定义在
            //gradle.properties 文件里，如果没有该文件手动创建即可，这样可以保证安全
            //只有定义在 gradle.properties 里的常量才可以直接通过常量名引用
            storeFile file('skylarkkeystore.jks')
            storePassword project.hasProperty('STOREPASS') ? STOREPASS : 'skylark'
            keyAlias project.hasProperty('KEYALIAS') ? KEYALIAS : 'skylark'
            keyPassword project.hasProperty('KEYPASS') ? KEYPASS : 'skylark'
        }
    }

    //编译，打包的项目配置
    buildTypes {

        debug {
            /**
             * 在 BuildConfig 里自定义一个 boolean 类型的常量
             * 更多资料可以查看：http://stormzhang.com/android/2015/01/25/gradle-build-field/
             */
            buildConfigField "boolean", "LOG_DEBUG", "true"
            debuggable true
//            applicationIdSuffix ".debug"
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"

            debuggable false
            //开启混淆
            minifyEnabled false
            //删除无用的资源
//            shrinkResources true
            //混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (keyStore.exists()) {
                println "Skylark: using skylark's key"
                //根据在signingConfigs.app1里的签名配置进行签名
                signingConfig signingConfigs.app1
            } else {
                println "Skylark: using default key"
            }

            //这段代码应该会在大神的项目里挺常见的，我在很多项目里都看见过了
            //这也是groovy的代码，这里的代码作用是重命名最后打包出来的apk
            //根据 def fileName 设置的格式来命名，${}表示的是某个变量的引用
            //例如根据设置的格式最后apk命名可能是： Meizhi_v1.0.0_2017-03-28_fir.apk
            //至于 applicationVariants 这些变量含义后面博客会介绍
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "一个木匣_v${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }

        //这里的作用跟 singingConfigs 差不多，只是为不同的 flavor 设置一些属性
        //常见的设置比如设置不同的渠道编号，设置不同的 api 服务器等等
        productFlavors {
            fir {
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "fir"]
            }
            GooglePlay {
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "GooglePlay"]
            }
            Umeng {
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "Umeng"]
            }
        }
    }

    //http legacy
    useLibrary 'org.apache.http.legacy'

    //lint的相关配置吧
    lintOptions {
        disable "InvalidPackage"
        lintConfig file("lint.xml")
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:25.0.1'
    compile 'com.android.support:design:25.0.1'
    compile 'com.android.support:recyclerview-v7:25.0.1'
    compile 'com.android.support:cardview-v7:25.0.1'

    /**
     *    注解
     */
    compile 'com.jakewharton:butterknife:7.0.1'

    /**
     *    加载图片的
     */
    compile 'com.github.bumptech.glide:glide:3.7.0'

    /**
     *    圆形图片框架
     */
    compile 'de.hdodenhof:circleimageview:2.1.0'

    /**
     *      facebook调试工具
     *      在Application中初始化就可以用了
     *      Stetho.initializeWithDefaults(this);
     *      打开Chrome浏览器 地址栏输入chrome://inspect
     *      进入页面后，在左边的DevTools -> Devices -> Remote Target下，
     *      可以找到你连接的手机设备，点开后就会出现调试页面了，后面就自己研究吧，
     *      不光可以调试网络请求，还可以查看手机中的数据库和SharePreference等持久化文件，
     *      而且不用root，很强大！
     作者：小枫
     链接：http://www.jianshu.com/p/cc086b60f4ef
     */
    compile 'com.facebook.stetho:stetho:1.4.1'
    compile 'com.facebook.stetho:stetho-okhttp3:1.4.1'

    /**
     *      okhttp3
     */
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.squareup.okio:okio:1.7.0'

    /**
     *      retrofit
     */
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'com.squareup.retrofit2:converter-scalars:2.1.0'

    //ConverterFactory的String依赖包

    /**
     *      rxjava
     */
    compile 'io.reactivex:rxjava:1.3.0'
    compile 'io.reactivex:rxandroid:1.2.1'

    //    compile 'com.trello:rxlifecycle:+'

    //    compile 'com.trello:rxlifecycle-components:+'
    compile 'com.google.code.gson:gson:2.2.4'

    /**
     *     使textview显示html格式的数据
     */
    compile 'net.sourceforge.htmlcleaner:htmlcleaner:2.16'

    /**
     *     类似于微信的可拖动ImageView
     */
    compile 'com.github.githubwing:DragPhotoView:1.0.1'

    /**
     *     webview顶端的进度条
     */
    compile 'com.daimajia.numberprogressbar:library:1.2@aar'

    /**
     *    css样式
     */
    compile files('libs/osbcp-css-parser-1.4.jar')

    /**
     *    数据库操作
     */
    compile files('libs/lite-orm-1.9.2.jar')

    /**
     *    毕加索 加载图片的
     */
    compile 'com.squareup.picasso:picasso:2.5.2'

    /**
     *    内存溢出检测
     */
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'

    /**
     *    友盟统计
     */
    compile 'com.umeng.analytics:analytics:latest.integration'

    /**
     *   极光推送
     */
    compile files('libs/jcore-android-1.1.7.jar')
    compile files('libs/jpush-android-3.0.9.jar')

    /**
     *   权限库
     */
    compile 'com.yanzhenjie:permission:1.1.0'

    /**
     *   网络监测 chuck
     */
    debugCompile 'com.readystatesoftware.chuck:library:1.0.4'
    releaseCompile 'com.readystatesoftware.chuck:library-no-op:1.0.4'

    /**
     *   提示库
     */
    compile 'com.bigkoo:svprogresshud:1.0.4'

    /**
     *   下拉刷新框架
     */
    compile 'com.github.Aspsine:SwipeToLoadLayout:v1.0.4'

    /**
     *   material风格的dialogs
     */
    compile 'com.afollestad.material-dialogs:core:0.9.3.0'

    /**
     *   版本升级
     */
    compile 'com.github.maning0303:MNUpdateAPK:V1.0.5'

    /**
     *   日历
     */
    compile 'com.github.maning0303:MNCalendar:V1.0.1'

    /**
     *   显示更多文字
     */
    compile 'com.ms-square:expandableTextView:0.1.4'

    /**
     *   RecycleView的间隔线
     */
    compile 'com.yqritc:recyclerview-flexibledivider:1.2.9'

    /**
     *   xUtils3
     */
    compile 'org.xutils:xutils:3.5.0'
    /**
     * 图片加载
     */
    compile files('libs/universal-image-loader-1.9.3.jar')
    /**
     * loading progress view
     */
    compile 'com.victor:lib:1.0.1'
    /**
     * jiaozivideoplayer 视频播放
     */
    compile 'cn.jzvd:jiaozivideoplayer:6.2.3'
}
